// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/fibrechannel/fibrechannel.go

// Package mocks is a generated GoMock package.
package mocks

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockioHandler is a mock of ioHandler interface.
type MockioHandler struct {
	ctrl     *gomock.Controller
	recorder *MockioHandlerMockRecorder
}

// MockioHandlerMockRecorder is the mock recorder for MockioHandler.
type MockioHandlerMockRecorder struct {
	mock *MockioHandler
}

// NewMockioHandler creates a new mock instance.
func NewMockioHandler(ctrl *gomock.Controller) *MockioHandler {
	mock := &MockioHandler{ctrl: ctrl}
	mock.recorder = &MockioHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockioHandler) EXPECT() *MockioHandlerMockRecorder {
	return m.recorder
}

// EvalSymlinks mocks base method.
func (m *MockioHandler) EvalSymlinks(path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvalSymlinks", path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvalSymlinks indicates an expected call of EvalSymlinks.
func (mr *MockioHandlerMockRecorder) EvalSymlinks(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalSymlinks", reflect.TypeOf((*MockioHandler)(nil).EvalSymlinks), path)
}

// Lstat mocks base method.
func (m *MockioHandler) Lstat(name string) (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lstat", name)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lstat indicates an expected call of Lstat.
func (mr *MockioHandlerMockRecorder) Lstat(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lstat", reflect.TypeOf((*MockioHandler)(nil).Lstat), name)
}

// ReadDir mocks base method.
func (m *MockioHandler) ReadDir(dirname string) ([]os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", dirname)
	ret0, _ := ret[0].([]os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockioHandlerMockRecorder) ReadDir(dirname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockioHandler)(nil).ReadDir), dirname)
}

// WriteFile mocks base method.
func (m *MockioHandler) WriteFile(filename string, data []byte, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", filename, data, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockioHandlerMockRecorder) WriteFile(filename, data, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockioHandler)(nil).WriteFile), filename, data, perm)
}
